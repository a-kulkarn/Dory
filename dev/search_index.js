var documenterSearchIndex = {"docs":
[{"location":"#Dory.jl-Documentation-1","page":"Dory.jl Documentation","title":"Dory.jl Documentation","text":"","category":"section"},{"location":"#","page":"Dory.jl Documentation","title":"Dory.jl Documentation","text":"Dory is a package to extend the functionality of Hecke.jl.","category":"page"},{"location":"#","page":"Dory.jl Documentation","title":"Dory.jl Documentation","text":"The main features are:","category":"page"},{"location":"#","page":"Dory.jl Documentation","title":"Dory.jl Documentation","text":"Convenience functions, such as various matrix get/set index methods for matrices supporting various types.\nGeneric eigenvector methods.\np-adic Linear algebra.","category":"page"},{"location":"#Broadcasting-1","page":"Dory.jl Documentation","title":"Broadcasting","text":"","category":"section"},{"location":"#","page":"Dory.jl Documentation","title":"Dory.jl Documentation","text":"Broadcasting is enabled for the AbstractAlgebra.Generic.MatElem{T} type. the syntax is your_function.(A).","category":"page"},{"location":"#","page":"Dory.jl Documentation","title":"Dory.jl Documentation","text":"The return type is either of type AbstractAlgebra.Generic.MatElem{T} or an array if the output type of your_function is not a subtype of NCRingElem.","category":"page"},{"location":"#pAdic-linear-algebra.-1","page":"Dory.jl Documentation","title":"pAdic linear algebra.","text":"","category":"section"},{"location":"#","page":"Dory.jl Documentation","title":"Dory.jl Documentation","text":"padic_qr","category":"page"},{"location":"#Dory.padic_qr","page":"Dory.jl Documentation","title":"Dory.padic_qr","text":"padic_qr(A :: Hecke.Generic.MatElem{padic} ; col_pivot :: Union{Val{true},Val{false}}) --> F :: QRPadicPivoted\n\nThe return type of F is a QRPadicPivoted, with fields F.Q, F.R, F.p, F.q described below.\n\nCompute the p-adic QR factorization of A. More precisely, compute matrices Q,R, and an arrays p, q such that \n\nA[F.p,F.q] = Q*R\n\nIf col_pivot=Val(false), then F.q = [1,2,...,size(A,2)].\n\n#–––––––––-\n\nINPUTS: A         – a matrix over Qp col_pivot – a type, either Val(true) or Val(false), indicating whether column permutations              should be used to move p-adically large entries to the pivot position.\n\n\n\npadic_qr(A; col_pivot) --> F\n\nThe return type of F is a QRPadicPivoted, with fields F.Q, F.R, F.p, F.q described below.\n\nCompute the p-adic QR factorization of A. More precisely, compute matrices Q,R, and an arrays p, q such that \n\nA[F.p,F.q] = Q*R\n\nIf col_pivot=Val(false), then F.q = [1,2,...,size(A,2)].\n\n#–––––––––-\n\nINPUTS: A         – a matrix over Qp, A::Hecke.Generic.MatElem{padic} col_pivot – a type, either Val(true) or Val(false), indicating whether column permutations              should be used to move p-adically large entries to the pivot position.\n\n\n\n\n\n","category":"function"},{"location":"#","page":"Dory.jl Documentation","title":"Dory.jl Documentation","text":"rectangular_solve","category":"page"},{"location":"#Dory.rectangular_solve","page":"Dory.jl Documentation","title":"Dory.rectangular_solve","text":"rectangular_solve(A::Hecke.MatElem{T}, b::Hecke.MatElem{T}; suppress_error=false) where T \n                                                                                --> x ::Hecke.MatElem{T}\n\nSolve the possibly overdetermined linear equation Ax = b. If no solution exists returns an error. Generally not intended for use.\n\nWARNINGS:\n\nThis function is very unsafe. It does not do basic sanity checks and will fail if the top nxn block is singular.\n\n\n\nrectangular_solve(A::Hecke.MatElem{padic}, b_input::Hecke.MatElem{padic}; stable::Bool=false)\n                                                                    --> (nu :: Int64,N::Hecke.MatElem{padic})\n\nSolves the linear system A*N = b. The output nu is the dimension of the nullspace. Parameter stable determines whether padic_qr or svd method is used. Default is qr (for speed).\n\nWARNINGS: If A,b_input have different precisions, maximal precision output is not guarenteed. Underdetermined solve not implemented.\n\n\n\n","category":"function"},{"location":"#","page":"Dory.jl Documentation","title":"Dory.jl Documentation","text":"eigen","category":"page"},{"location":"#Dory.eigen","page":"Dory.jl Documentation","title":"Dory.eigen","text":"eigen(A::nmod_mat)\n\nComputes the Eigenvalue decomposition of A. Requires factorization of polynomials implemented over the base ring.\n\n(Depreciated. eigspaces is better to use.)\n\n\n\n\n\n","category":"function"},{"location":"#","page":"Dory.jl Documentation","title":"Dory.jl Documentation","text":"eigvecs","category":"page"},{"location":"#Dory.eigvecs","page":"Dory.jl Documentation","title":"Dory.eigvecs","text":"eigvecs( A :: Hecke.Generic.MatElem{T}) where T -> A :: Hecke.Generic.MatElem{T}\n\nReturn a matrix M whose columns are the eigenvectors of A. (The kth eigenvector can be obtained from the slice M[:, k].)\n\n\n\n","category":"function"},{"location":"#","page":"Dory.jl Documentation","title":"Dory.jl Documentation","text":"eigspaces","category":"page"},{"location":"#Dory.eigspaces","page":"Dory.jl Documentation","title":"Dory.eigspaces","text":"eigspaces(A::Hecke.Generic.MatElem{T}) where T --> EigenSpaceDec{T}\n\nComputes the eigen spaces of a generic matrix, and returns a list of matrices whose columns are generators for the eigen spaces.\n\n\n\n","category":"function"},{"location":"#","page":"Dory.jl Documentation","title":"Dory.jl Documentation","text":"singular_values","category":"page"},{"location":"#Dory.singular_values","page":"Dory.jl Documentation","title":"Dory.singular_values","text":"singular_values(A::Hecke.MatElem{padic}) -> Array{padic, 1}\n\nReturns the list of diagonal elements in the singular value decomposition of the matrix A.\n\n\n\n","category":"function"}]
}
